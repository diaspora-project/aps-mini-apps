# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TraceDS

import flatbuffers

class TImage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTImage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TImage()
        x.Init(buf, n + offset)
        return x

    # TImage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TImage
    def Seq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TImage
    def Dims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .Dim2 import Dim2
            obj = Dim2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TImage
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TImage
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TImage
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TImage
    def Tdata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # TImage
    def TdataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # TImage
    def TdataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def TImageStart(builder): builder.StartObject(6)
def TImageAddSeq(builder, seq): builder.PrependInt32Slot(0, seq, 0)
def TImageAddDims(builder, dims): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dims), 0)
def TImageAddRotation(builder, rotation): builder.PrependFloat32Slot(2, rotation, 0.0)
def TImageAddCenter(builder, center): builder.PrependFloat32Slot(3, center, 0.0)
def TImageAddUniqueId(builder, uniqueId): builder.PrependInt32Slot(4, uniqueId, 0)
def TImageAddTdata(builder, tdata): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tdata), 0)
def TImageStartTdataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TImageEnd(builder): return builder.EndObject()
